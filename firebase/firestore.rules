rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() { return request.auth != null; }
    function isAdmin() {
      return isSignedIn() && (
        // Prefer custom claims on the auth token
        (request.auth.token.role in ['admin', 'super_admin']) ||
        (
          exists(/databases/$(database)/documents/admins/$(request.auth.uid)) &&
          get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.role in ['admin', 'super_admin']
        ) || (
          exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
        )
      );
    }

    // Users can only manage their own document. Admins have full access.
    match /users/{userId} {
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow read, update, delete: if isAdmin() || (isSignedIn() && request.auth.uid == userId);
    }

    // Cooks manage their own profile. Admins have full access.
    match /cooks/{cookId} {
      allow create: if isSignedIn() && request.auth.uid == cookId;
      allow read: if isAdmin() || (isSignedIn() && request.auth.uid == cookId);
      allow update, delete: if isAdmin() || (isSignedIn() && request.auth.uid == cookId);
    }

    // Cook verification documents - owner and admins only
    match /cookVerifications/{cookId} {
      allow create: if isSignedIn() && request.auth.uid == cookId;
      allow read, update, delete: if isAdmin() || (isSignedIn() && request.auth.uid == cookId);
    }

    // Admin records are readable/writable only by that admin user.
    match /admins/{adminId} {
      allow read, write: if isAdmin() && request.auth.uid == adminId;
    }

    // Orders are readable/writable by participants (customer or cook) and admins.
    match /orders/{orderId} {
      allow create: if isSignedIn() && (
        request.resource.data.customerId == request.auth.uid ||
        request.resource.data.cookId == request.auth.uid
      );
      allow read, update, delete: if isAdmin() || (isSignedIn() && (
        resource.data.customerId == request.auth.uid ||
        resource.data.cookId == request.auth.uid
      ));
    }

    // Menu items readable by everyone; only the owning cook (by cookId) or admin can write.
    match /menuItems/{menuItemId} {
      allow read: if true;
      allow create: if isSignedIn() && request.resource.data.cookId == request.auth.uid;
      allow update, delete: if isAdmin() || (isSignedIn() && resource.data.cookId == request.auth.uid);
    }

    // Optional menus collection reserved for admin management.
    match /menus/{menuId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Chat messages restricted to order participants and admins.
    match /chatMessages/{messageId} {
      allow create: if isSignedIn() &&
        exists(/databases/$(database)/documents/orders/$(request.resource.data.orderId)) &&
        (get(/databases/$(database)/documents/orders/$(request.resource.data.orderId)).data.customerId == request.auth.uid || 
         get(/databases/$(database)/documents/orders/$(request.resource.data.orderId)).data.cookId == request.auth.uid);

      allow read, update, delete: if isAdmin() || (isSignedIn() &&
        exists(/databases/$(database)/documents/orders/$(resource.data.orderId)) &&
        (get(/databases/$(database)/documents/orders/$(resource.data.orderId)).data.customerId == request.auth.uid || 
         get(/databases/$(database)/documents/orders/$(resource.data.orderId)).data.cookId == request.auth.uid)
      );
    }

    // Notifications: users can manage their own; participants can create notifications tied to their orders.
    match /notifications/{notificationId} {
      allow create: if isSignedIn() && (
        (
          request.resource.data.orderId != null &&
          exists(/databases/$(database)/documents/orders/$(request.resource.data.orderId)) &&
          (get(/databases/$(database)/documents/orders/$(request.resource.data.orderId)).data.customerId == request.auth.uid || 
           get(/databases/$(database)/documents/orders/$(request.resource.data.orderId)).data.cookId == request.auth.uid)
        ) ||
        request.resource.data.userId == request.auth.uid
      );
      allow read: if isAdmin() || (isSignedIn() && resource.data.userId == request.auth.uid);
      allow update, delete: if isAdmin() || (isSignedIn() && resource.data.userId == request.auth.uid);
    }

    // Deny everything else by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
